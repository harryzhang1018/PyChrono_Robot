#------------------------------------------------------------------------------
# Name:        pychrono example
# Purpose:
#
# Author:      Harry Zhang
#
# Created:     03/09/2024
# Copyright:   (c) ProjectChrono 2019
#------------------------------------------------------------------------------
 
 
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import math
import os

# Get the directory where the script is located
script_dir = os.path.dirname(os.path.abspath(__file__))
# Construct the path to the data folder
data_dir = os.path.join(script_dir, '..', 'data')
# Normalize the path
data_dir = os.path.normpath(data_dir)

my_system = chrono.ChSystemNSC()
my_system.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)
 
material = chrono.ChContactMaterialNSC()
material.SetFriction(0.5)

# load collision mesh
mesh = chrono.ChTriangleMeshConnected()
mesh.LoadWavefrontMesh(data_dir+'/robot_arm_shapes/body_9_1.obj')
# Create a collision shape
finger_shape = chrono.ChCollisionShapeTriangleMesh(material, # contact material
                                                    mesh,     # the mesh 
                                                    False,    # is it static?
                                                    False,    # is it convex?
                                                    0.0)     # "thickness" for increased robustness

# # Set the collision margins. This is expecially important for very large or
# very small objects (as in this example)! Do this before creating shapes.
chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.001)
chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.001)
 
 
# ---------------------------------------------------------------------
#
#  load the file generated by the SolidWorks CAD plugin
#  and add it to the system
#
 
print ("Loading C::E scene...")
 
# exported_items = chrono.ImportSolidWorksSystem('/home/harry/chrono_fork/data/solidworks/swiss_escapement.py')
exported_items = chrono.ImportSolidWorksSystem(data_dir+'/robot_arm.py')
# print(exported_items)
print ("...done!")
 
# # Print exported items
# for my_item in exported_items:
#     print (my_item.GetName())
 
# Add items to the physical system
for my_item in exported_items:
    my_system.Add(my_item)

## extract bodies
base  = my_system.SearchBody('Block1-1-1^industrial robotic arm-1')
base_motor_block = my_system.SearchBody('Assem7^industrial robotic arm_2-1')
base_arm = my_system.SearchBody('Assem6^industrial robotic arm_2-1')
second_arm = my_system.SearchBody('Assem5^industrial robotic arm_2-1')
arm_gripper_connector = my_system.SearchBody('Assem4^industrial robotic arm_2-1')
gripper = my_system.SearchBody('Assem3^industrial robotic arm_2-1')
gripper_block_1 = my_system.SearchBody('mob clap-1')
gripper_block_2 = my_system.SearchBody('mob clap-2')
gripper_finger_1 = my_system.SearchBody('Mod clmp ND-1')
gripper_finger_2 = my_system.SearchBody('Mod clmp ND-2')


# # ## enable collision for gripper fingers
gripper_finger_1.AddCollisionShape(finger_shape)
gripper_finger_2.AddCollisionShape(finger_shape)
gripper_finger_1.EnableCollision(True)
gripper_finger_2.EnableCollision(True)


# Create a motor between the base and the base_motor_block
motor_base = chrono.ChLinkMotorRotationAngle()
motor_base_func  = chrono.ChFunctionConst(1.0)
frame_1 = chrono.ChFramed(base.GetPos(),chrono.Q_ROTATE_Z_TO_Y)
motor_base.Initialize(base, base_motor_block,frame_1)

my_system.Add(motor_base)

# Create a motor between the base_motor_block and the base_arm
motor_base_arm = chrono.ChLinkMotorRotationAngle()
motor_base_arm_func  = chrono.ChFunctionConst(1.0)
joint_1 = my_system.SearchLink('Distance2')
joint_1_frame = joint_1.GetVisualModelFrame()
motor_base_arm.Initialize(base_motor_block, base_arm, joint_1_frame)

my_system.Add(motor_base_arm)

# Create a motor between the base_arm and the second_arm
motor_arms = chrono.ChLinkMotorRotationAngle()
motor_arms_func  = chrono.ChFunctionConst(-2.0)
joint_2 = my_system.SearchLink('Distance4')
joint_2_frame = joint_2.GetVisualModelFrame()
motor_arms.Initialize(base_arm, second_arm, joint_2_frame)

my_system.Add(motor_arms)

### Create a motor between the second_arm and the arm_gripper_connector
motor_arm_gripper = chrono.ChLinkMotorRotationAngle()
motor_arm_gripper_func  = chrono.ChFunctionConst(2.0)
joint_3 = my_system.SearchLink('Concentric8')
joint_3_frame = joint_3.GetVisualModelFrame()
motor_arm_gripper.Initialize(second_arm, arm_gripper_connector, joint_3_frame)

my_system.Add(motor_arm_gripper)

### Create a motor between the arm_gripper_connector and the gripper
motor_gripper = chrono.ChLinkMotorRotationAngle()
motor_gripper_func  = chrono.ChFunctionConst(1.7)
joint_4 = my_system.SearchLink('Concentric7')
joint_4_frame = joint_4.GetVisualModelFrame()
motor_gripper.Initialize(arm_gripper_connector, gripper, joint_4_frame)

my_system.Add(motor_gripper)

### Create a motor between the gripper and the gripper_block_1
motor_gripper_block_1 = chrono.ChLinkMotorLinearPosition()
motor_gripper_block_1_func  = chrono.ChFunctionConst(0.03)
joint_5 = my_system.SearchLink('Coincident12')
joint_5_frame = chrono.ChFramed(joint_5.GetVisualModelFrame().GetPos(),chrono.Q_ROTATE_Z_TO_X)
motor_gripper_block_1.Initialize(gripper, gripper_block_1, joint_5_frame)
motor_gripper_block_1.SetMotionFunction(motor_gripper_block_1_func)
my_system.Add(motor_gripper_block_1)

### Create a motor between the gripper and the gripper_block_2
motor_gripper_block_2 = chrono.ChLinkMotorLinearPosition()
motor_gripper_block_2_func  = chrono.ChFunctionConst(-0.03)
joint_6 = my_system.SearchLink('Coincident17')
joint_6_frame = chrono.ChFramed(joint_6.GetVisualModelFrame().GetPos(),chrono.Q_ROTATE_Z_TO_X)
motor_gripper_block_2.Initialize(gripper, gripper_block_2, joint_6_frame)
motor_gripper_block_2.SetMotionFunction(motor_gripper_block_2_func)
my_system.Add(motor_gripper_block_2)

### Define gripper pick and place motion
def gripper_pick():
    func1 = chrono.ChFunctionConst(0.03)
    func2 = chrono.ChFunctionConst(-0.03)
    motor_gripper_block_1.SetMotionFunction(func1)
    motor_gripper_block_2.SetMotionFunction(func2)
def gripper_place():
    func1 = chrono.ChFunctionConst(0.05)
    func2 = chrono.ChFunctionConst(-0.05)
    motor_gripper_block_1.SetMotionFunction(func1)
    motor_gripper_block_2.SetMotionFunction(func2)
### Create a lock between the gripper_block_1 and the gripper_finger_1
lock_gripper_finger_1 = chrono.ChLinkLockLock()
lock1_frame = my_system.SearchLink('Coincident10').GetVisualModelFrame()
lock_gripper_finger_1.Initialize(gripper_block_1, gripper_finger_2, lock1_frame)
my_system.Add(lock_gripper_finger_1)
### Create a lock between the gripper_block_2 and the gripper_finger_2
lock_gripper_finger_2 = chrono.ChLinkLockLock()
lock2_frame = my_system.SearchLink('Coincident14').GetVisualModelFrame()
lock_gripper_finger_2.Initialize(gripper_block_2, gripper_finger_1, lock2_frame)
my_system.Add(lock_gripper_finger_2)

### Create a ball to grab
ball = chrono.ChBodyEasySphere(0.05, 1, True, True,chrono.ChContactMaterialNSC())
ball.GetVisualShape(0).SetTexture(chrono.GetChronoDataFile("textures/blue.png"))
ball.SetPos(chrono.ChVector3d(-0.534622, 0.989506, 0.154854))
ball.SetFixed(True)
ball.EnableCollision(False)
my_system.Add(ball)


### Create visualization for the gripper fingers
vis = chronoirr.ChVisualSystemIrrlicht(my_system, chrono.ChVector3d(-2, 1, -1))
vis.EnableCollisionShapeDrawing(True)
timestep = 0.0005
render_step_size = 1.0 / 50  # FPS = 50
render_steps = math.ceil(render_step_size / timestep)
step_number = 0
render_frame = 0

rt_timer = chrono.ChRealtimeStepTimer()

# solver = chrono.ChSolverPSOR()
# solver.SetMaxIterations(250)
# # solver.EnableWarmStart(True)
# # solver.EnableDiagonalPreconditioner(True)
# my_system.SetSolver(solver)
my_system.GetSolver().AsIterative().SetMaxIterations(500)


while vis.Run():
    sim_time = my_system.GetChTime()
    if step_number % render_steps == 0:
        vis.BeginScene()
        vis.Render()
        vis.EndScene()
        filename = './IMG/img_' + str(render_frame) +'.jpg' 
        vis.WriteImageToFile(filename)
        render_frame += 1
    my_system.DoStepDynamics(timestep)
    motor_gripper.SetAngleFunction(motor_gripper_func)
    # # implement hardcode control
    if sim_time > 2.5:
        ball.EnableCollision(True)
        ball.SetFixed(False)
        # motor_base.SetAngleFunction(motor_base_func)
        motor_base_arm.SetAngleFunction(motor_base_arm_func)
    if sim_time > 3.5:
        motor_base.SetAngleFunction(motor_base_func)

    if sim_time > 4.5:
        gripper_place()
        
    # else:
    #     print("finger 1 pos: ", gripper_finger_1.GetPos())
    #     print("finger 2 pos: ", gripper_finger_2.GetPos())
    #     print("pos center: ", (gripper_finger_1.GetPos() + gripper_finger_2.GetPos())/2)
    
    rt_timer.Spin(timestep)
    step_number += 1

 
