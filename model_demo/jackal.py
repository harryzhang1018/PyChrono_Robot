#------------------------------------------------------------------------------
# Name:        pychrono example
# Purpose:
#
# Author:      Harry Zhang
#
# Created:     03/09/2024
# Copyright:   (c) ProjectChrono 2019
#------------------------------------------------------------------------------
 
 
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh
import math
import os

# Get the directory where the script is located
script_dir = os.path.dirname(os.path.abspath(__file__))
# Construct the path to the data folder
data_dir = os.path.join(script_dir, '..', 'data')
# Normalize the path
data_dir = os.path.normpath(data_dir)

my_system = chrono.ChSystemNSC()
my_system.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)
# solver = chrono.ChSolverPSOR()
# solver.SetMaxIterations(400)
# my_system.SetSolver(solver)

material = chrono.ChContactMaterialNSC()
# material.SetFriction(0.1)
# material.SetRollingFriction(0.01)
# load collision mesh
mesh = chrono.ChTriangleMeshConnected()
mesh.LoadWavefrontMesh(data_dir+'/Jackal_1_shapes/body_1_1.obj')
# Create a collision shape
wheel_shape = chrono.ChCollisionShapeTriangleMesh(material, # contact material
                                                    mesh,     # the mesh 
                                                    False,    # is it static?
                                                    False,    # is it convex?
                                                    0.0)     # "thickness" for increased robustness
# ---------------------------------------------------------------------
#
#  load the file generated by the SolidWorks CAD plugin
#  and add it to the system
#
 
print ("Loading C::E scene...")
 
# exported_items = chrono.ImportSolidWorksSystem('/home/harry/chrono_fork/data/solidworks/swiss_escapement.py')
exported_items = chrono.ImportSolidWorksSystem(data_dir+'/Jackal_1.py')
# print(exported_items)
print ("...done!")
 
# Print exported items
for my_item in exported_items:
    print (my_item.GetName())
 
# Add items to the physical system
for my_item in exported_items:
    my_system.Add(my_item)

# extract bodies
chassis = my_system.SearchBody('Part15-1')
# chassis.SetFixed(True)
wheel_fr = my_system.SearchBody('Part16-1')
wheel_fl = my_system.SearchBody('Part16-5')
wheel_br = my_system.SearchBody('Part16-2')
wheel_bl = my_system.SearchBody('Part16-6')
for wheel in [wheel_fr, wheel_fl, wheel_br, wheel_bl]:
    wheel.AddCollisionShape(wheel_shape)
    wheel.EnableCollision(True)
# adding motors to the wheels
# motor_fr = chrono.ChLinkMotorRotationSpeed()
# motor_fl = chrono.ChLinkMotorRotationSpeed()
motor_br = chrono.ChLinkMotorRotationSpeed()
motor_bl = chrono.ChLinkMotorRotationSpeed()

joint_fr = my_system.SearchLink('Concentric1')
frame_fr = joint_fr.GetVisualModelFrame()
joint_fl = my_system.SearchLink('Concentric4')
frame_fl = joint_fl.GetVisualModelFrame()
joint_br = my_system.SearchLink('Concentric2')
frame_br = joint_br.GetVisualModelFrame()
joint_bl = my_system.SearchLink('Concentric3')
frame_bl = joint_bl.GetVisualModelFrame()

steering_motor_fr = chrono.ChLinkMotorRotationAngle()
frame_steering_fr = chrono.ChFramed(joint_fr.GetVisualModelFrame().GetPos(),chrono.Q_ROTATE_Z_TO_Y)
steering_motor_fl = chrono.ChLinkMotorRotationAngle()
frame_steering_fl = chrono.ChFramed(joint_fl.GetVisualModelFrame().GetPos(),chrono.Q_ROTATE_Z_TO_Y)

steering_motor_fr.Initialize(chassis, wheel_fr, frame_steering_fr)
steering_motor_fl.Initialize(chassis, wheel_fl, frame_steering_fl)


# motor_fr.Initialize(chassis, wheel_fr, frame_fr)
# motor_fl.Initialize(chassis, wheel_fl, frame_fl)
motor_br.Initialize(chassis, wheel_br, frame_br)
motor_bl.Initialize(chassis, wheel_bl, frame_bl)

# my_system.Add(motor_fr)
# my_system.Add(motor_fl)
my_system.Add(motor_br)
my_system.Add(motor_bl)
my_system.Add(steering_motor_fr)
my_system.Add(steering_motor_fl)

# steering_motor_fr.SetMotorFunction(chrono.ChFunctionConst(0.3))
# steering_motor_fl.SetMotorFunction(chrono.ChFunctionConst(0.3))

# create rigid ground 
# Create the terrain
patch_mat = chrono.ChContactMaterialNSC()
# patch_mat.SetFriction(0.1)
# patch_mat.SetRollingFriction(0.001)
terrain = veh.RigidTerrain(my_system)
patch = terrain.AddPatch(patch_mat, 
    chrono.ChCoordsysd(chrono.ChVector3d(0, -0.3, 0), chrono.Q_ROTATE_Z_TO_Y), 
    100, 100)

patch.SetTexture(chrono.GetChronoDataPath()+"vehicle/terrain/textures/tile4.jpg", 200, 200)
patch.SetColor(chrono.ChColor(0.8, 0.8, 0.5))
terrain.Initialize()

### Create visualization for the gripper fingers
vis = chronoirr.ChVisualSystemIrrlicht(my_system, chrono.ChVector3d(-2, 1, -1))
vis.EnableCollisionShapeDrawing(True)
timestep = 0.001
render_step_size = 1.0 / 25  # FPS = 50
render_steps = math.ceil(render_step_size / timestep)
step_number = 0
render_frame = 0

rt_timer = chrono.ChRealtimeStepTimer()

def longtitude_control(direction="forward",speed=1):
    wheel_motor_func1  = chrono.ChFunctionConst(-10*speed)
    wheel_motor_func2  = chrono.ChFunctionConst(10*speed)
    if direction == "backward":
        #motor_fr.SetMotorFunction(wheel_motor_func1)
        #motor_fl.SetMotorFunction(wheel_motor_func2)
        motor_br.SetMotorFunction(wheel_motor_func1)
        motor_bl.SetMotorFunction(wheel_motor_func2)
    elif direction == "forward":
        #motor_fr.SetMotorFunction(wheel_motor_func2)
        #motor_fl.SetMotorFunction(wheel_motor_func1)
        motor_br.SetMotorFunction(wheel_motor_func2)
        motor_bl.SetMotorFunction(wheel_motor_func1)

def steering_control(steering_angle=0.2):
    steering_motor_fr.SetMotorFunction(chrono.ChFunctionConst(steering_angle))
    steering_motor_fl.SetMotorFunction(chrono.ChFunctionConst(steering_angle))


my_system.GetSolver().AsIterative().SetMaxIterations(500)


while vis.Run():
    sim_time = my_system.GetChTime()
    if step_number % render_steps == 0:
        vis.BeginScene()
        vis.Render()
        vis.EndScene()
        # filename = './IMG_jackal/img_' + str(render_frame) +'.jpg' 
        # vis.WriteImageToFile(filename)
        # render_frame += 1
    terrain.Synchronize(sim_time)
    my_system.DoStepDynamics(timestep)
    terrain.Advance(timestep)
    # if sim_time > 0.5:
    #     print("forward")
    #     longtitude_control(direction="forward",speed=1)
    # if sim_time > 1:
    #     longtitude_control(direction="forward",speed=1)
    #     steering_control(steering_angle=-0.2)
    # if sim_time > 2:
    #     longtitude_control(direction="forward",speed=1)
    #     steering_control(steering_angle=0.2)
    #steering_control(steering_angle=0.0)
    longtitude_control(direction="forward",speed=0.5)
    steering_control(steering_angle=0.0)
    
    rt_timer.Spin(timestep)
    step_number += 1

 
